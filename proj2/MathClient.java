
import java.io.*;
import java.net.*;
import java.util.*;

public class MathClient {
    private static UUID clientToken;
    private static int nrOfRetries = 0;
    private static int maxNrOfRetries = 3;

    public static void main(String[] args) {
        if (args.length < 2) {
            System.out.println("Usage: java MathClient <hostname> <port>");
            return;
        }

        String hostname = args[0];
        int port = Integer.parseInt(args[1]);
        BufferedReader userInputReader = new BufferedReader(new InputStreamReader(System.in));

        while (true) {
            System.out.println("\nMenu:");
            System.out.println("1. Play");
            System.out.println("2. Exit");
            System.out.print("Enter your choice: ");

            try {
                String choice = userInputReader.readLine();
                if ("2".equals(choice)) {
                    System.out.println("Exiting client.");
                    break;
                } else if ("1".equals(choice)) {
                    connectToServer(hostname, port, userInputReader);
                } else {
                    System.out.println("Invalid option. Please try again.");
                }
            } catch (IOException e) {
                System.out.println("Error reading input from user: " + e.getMessage());
            }
        }
    }

    private static void connectToServer(String hostname, int port, BufferedReader userInputReader) {
        try (Socket socket = new Socket(hostname, port);
                BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                PrintWriter writer = new PrintWriter(socket.getOutputStream(), true)) {

            System.out.println("Connected to the server. Ready to answer questions!");

            // get generated token from server
            clientToken = receiveClientToken(socket);

            String fromServer;
            while ((fromServer = reader.readLine()) != null) {
                // check whether the connection is lost
                if (fromServer.equals("Connection lost")) {
                    if (nrOfRetries > maxNrOfRetries) {
                        break;
                    } else {
                        nrOfRetries++;
                        sendClientToken(socket);
                        // if server response is ok, we call connectToServer(hostname, port,
                        // userInputReader);
                        BufferedReader serverResponse = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                        String serverResponseStr = serverResponse.toString();

                        if (serverResponseStr.equals("Reconnecting...")) {
                            // client was able to reconnect
                            connectToServer(hostname, port, userInputReader);
                        }
                    }
                }
                if ("END_OF_QUESTIONS".equals(fromServer)) {
                    break;
                }
                System.out.println(fromServer);

                System.out.print("Your answer: ");
                String userResponse = userInputReader.readLine();
                writer.println(userResponse);
            }

            // Receive final score
            System.out.println(reader.readLine());

        } catch (UnknownHostException e) {
            System.out.println("Don't know about host " + hostname);
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println("Couldn't get I/O for the connection to " + hostname);
            e.printStackTrace();
        }
    }

    // receive client token generated by the server
    private static UUID receiveClientToken(Socket socket) throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
        String tokenStr = reader.readLine();

        return UUID.fromString(tokenStr); // Parse token received from server
    }

    // receive client token generated by the server
    private static void sendClientToken(Socket socket) throws IOException {
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);
        writer.println(clientToken);
        ;
    }
}
